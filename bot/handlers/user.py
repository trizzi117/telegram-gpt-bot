from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold
from bot.services.openai_service import ask_gpt, generate_image, is_prompt_safe
from bot.services.memory_service import save_message, get_short_memory, save_summary, get_last_summary
from bot.services.payment_service import check_subscription, get_user_limits, generate_payment_link
from bot.config import FREE_USER_LIMIT
import asyncio
import datetime
from loguru import logger

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üìä –ú–æ–π –ª–∏–º–∏—Ç")],
        [KeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
subscribe_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_generation_state = {}

@router.message(CommandStart())
async def cmd_start(message: Message):
    summary = await get_last_summary(message.from_user.id)
    greeting = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ—á—å üí¨"
    if summary:
        greeting += f"\n\n{hbold('–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏:')} {summary}"
    await message.answer(greeting, reply_markup=main_keyboard)

@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n\n"
        "‚úÖ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∏–∞–ª–æ–≥\n"
        "‚úÖ –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "‚úÖ –ú–æ–≥—É –±—ã—Ç—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º\n"
        "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (–¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "/limit - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/image - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç:</b>\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ GPT-4o (—Å–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å)\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DALL-E\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("new"))
@router.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def cmd_new_dialog(message: Message):
    # –ù–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥! –û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?", reply_markup=main_keyboard)

@router.message(Command("limit"))
@router.message(F.text == "üìä –ú–æ–π –ª–∏–º–∏—Ç")
async def cmd_limit(message: Message):
    user_id = message.from_user.id
    is_premium = await check_subscription(user_id)
    
    if is_premium:
        await message.answer("–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π üéâ")
        return
        
    used, limit = await get_user_limits(user_id)
    remaining = max(0, limit - used)
    
    await message.answer(
        f"üìä <b>–¢–≤–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used} –∏–∑ {limit}\n"
        f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        f"–î–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É!",
        parse_mode="HTML",
        reply_markup=main_keyboard
    )

@router.message(Command("subscribe"))
@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
@router.message(F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def cmd_subscribe(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
    if await check_subscription(user_id):
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –æ–±—â–µ–Ω–∏–µ–º —Å GPT-4o –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.", reply_markup=main_keyboard)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    payment_link_1 = await generate_payment_link(user_id, days=30, amount=299)
    payment_link_3 = await generate_payment_link(user_id, days=90, amount=799)
    payment_link_12 = await generate_payment_link(user_id, days=365, amount=2990)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", url=payment_link_1)],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ", url=payment_link_3)],
        [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ - 2990‚ÇΩ", url=payment_link_12)]
    ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GPT-4o –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:\n\n"
        "‚úÖ –ë–µ–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–∞–º–æ–π –º–æ—â–Ω–æ–π –º–æ–¥–µ–ª–∏ GPT-4o\n"
        "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DALL-E\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
        reply_markup=keyboard
    )

@router.message(Command("image"))
@router.message(F.text == "üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def cmd_image(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id):
        await message.answer(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n"
            "–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
            reply_markup=subscribe_button
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_generation_state[user_id] = True
    
    await message.answer(
        "–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç –Ω–∞ –ª–æ—à–∞–¥–∏ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏'",
        reply_markup=main_keyboard
    )

@router.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message.text:
        await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.", reply_markup=main_keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if user_id in image_generation_state and image_generation_state[user_id]:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        image_generation_state.pop(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        is_safe = await is_prompt_safe(message.text)
        if not is_safe:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.",
                reply_markup=main_keyboard
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await message.bot.send_chat_action(chat_id=user_id, action="upload_photo")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success, result = await generate_image(user_id, message.text)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await message.answer_photo(
                result,
                caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message.text}",
                reply_markup=main_keyboard
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result}", reply_markup=main_keyboard)
        
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not await check_subscription(user_id):
        used, limit = await get_user_limits(user_id)
        if used >= limit:
            await message.answer(
                "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                "–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!", 
                reply_markup=subscribe_button
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, 'user', message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    short_mem = await get_short_memory(user_id)
    summary = await get_last_summary(user_id)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.bot.send_chat_action(chat_id=user_id, action="typing")
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ "–æ–±–¥—É–º—ã–≤–∞–Ω–∏—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    thinking_time = min(1.5, 0.5 + len(message.text) / 500)
    await asyncio.sleep(thinking_time)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
    try:
        reply = await ask_gpt(user_id, message.text, short_mem, summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await save_message(user_id, 'assistant', reply)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(reply, reply_markup=main_keyboard)
        
        # –°–æ–∑–¥–∞–µ–º summary –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_count = len(short_mem)
        if messages_count % 10 == 0 and messages_count > 0:
            try:
                # –°–æ–∑–¥–∞–µ–º summary –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                summary_prompt = f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:\n"
                for msg in short_mem:
                    summary_prompt += f"{msg['role']}: {msg['content']}\n"
                
                summary_text = await ask_gpt(user_id, summary_prompt, [], None)
                await save_summary(user_id, summary_text)
            except Exception as e:
                logger.error(f"Error creating summary: {e}")
    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", reply_markup=main_keyboard)
        logger.error(f"Error in message handler: {e}") 