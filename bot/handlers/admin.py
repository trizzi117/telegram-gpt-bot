from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from bot.config import ADMIN_IDS
from bot.database.crud import get_all_users, get_stats, add_subscription, delete_old_messages
from bot.services.memory_service import set_system_prompt
from aiogram.exceptions import TelegramForbiddenError
import datetime
import os
from loguru import logger

router = Router()

def admin_only(func):
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

@router.message(Command("admin"))
@admin_only
async def admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    admin_commands = (
        "üîë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º\n\n"
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n"
        "/set_prompt - –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/show_prompt - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç\n"
        "/clean_db - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>\n"
        "/add_subscription ID DAYS - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/check_sub ID - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    await message.answer(admin_commands, parse_mode="HTML")

@router.message(Command("broadcast"))
@admin_only
async def broadcast(message: Message):
    text = message.text.partition(' ')[2]
    if not text:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"broadcast_confirm_{message.message_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")]
    ])
    
    await message.answer(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{text}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("broadcast_confirm_"))
async def broadcast_confirm(callback_query):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    message_id = int(callback_query.data.split("_")[2])
    original_message = await callback_query.bot.get_message(
        callback_query.message.chat.id, 
        message_id
    )
    
    text = original_message.text.partition(' ')[2]
    users = await get_all_users()
    count = 0
    failed = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
    status_message = await callback_query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 –∏–∑ {total}".format(total=len(users)),
        reply_markup=None
    )
    
    for i, user in enumerate(users):
        try:
            await callback_query.bot.send_message(user.user_id, text)
            count += 1
        except TelegramForbiddenError:
            failed += 1
        except Exception as e:
            logger.error(f"Error sending broadcast to {user.user_id}: {e}")
            failed += 1
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if i % 10 == 0:
            await status_message.edit_text(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i+1} –∏–∑ {len(users)}"
            )
    
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {count}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

@router.callback_query(lambda c: c.data == "broadcast_cancel")
async def broadcast_cancel(callback_query):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    await callback_query.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await callback_query.answer()

@router.message(Command("users"))
@admin_only
async def users_list(message: Message):
    users = await get_all_users()
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    users = users[:20]
    text = '\n'.join([f"ID: {u.user_id} ‚Äî –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {u.last_active.strftime('%d.%m %H:%M')}" for u in users])
    
    await message.answer(
        f"üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{text}\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(await get_all_users())}",
        parse_mode="HTML"
    )

@router.message(Command("set_prompt"))
@admin_only
async def set_prompt_cmd(message: Message):
    prompt = message.text.partition(' ')[2]
    if not prompt:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /set_prompt –¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        )
        return
        
    await set_system_prompt(prompt)
    await message.answer("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")

@router.message(Command("show_prompt"))
@admin_only
async def show_prompt_cmd(message: Message):
    from bot.services.memory_service import get_system_prompt
    prompt = await get_system_prompt()
    
    if not prompt:
        await message.answer("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω.")
        return
        
    await message.answer(f"üìù <b>–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n\n{prompt}", parse_mode="HTML")

@router.message(Command("stats"))
@admin_only
async def stats(message: Message):
    stats_data = await get_stats()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    current_date = datetime.datetime.now().strftime("%d.%m.%Y")
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {current_date}</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_data['users']}\n"
        f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats_data['subscribers']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: {stats_data['messages_today']}\n\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {round(stats_data['subscribers']/max(1, stats_data['users'])*100, 1)}%"
    )
    
    await message.answer(stats_text, parse_mode="HTML")

@router.message(Command("add_subscription"))
@admin_only
async def add_subscription_cmd(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ÑπÔ∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "/add_subscription USER_ID DAYS\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> /add_subscription 123456789 30",
            parse_mode="HTML"
        )
        return
        
    try:
        user_id = int(parts[1])
        days = int(parts[2])
        
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        expires_at = datetime.datetime.utcnow() + datetime.timedelta(days=days)
        await add_subscription(user_id, expires_at)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        expires_formatted = expires_at.strftime("%d.%m.%Y %H:%M")
        
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_formatted}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id, 
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–±–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π.\n"
                f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –¥–æ—Å—Ç—É–ø –∫ GPT-4o –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
            )
        except TelegramForbiddenError:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. USER_ID –∏ DAYS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("check_sub"))
@admin_only
async def check_subscription_cmd(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /check_sub USER_ID")
        return
        
    try:
        user_id = int(parts[1])
        from bot.services.payment_service import check_subscription
        
        is_subscribed = await check_subscription(user_id)
        if is_subscribed:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            from bot.database.crud import get_user_subscription
            sub = await get_user_subscription(user_id)
            expires_at = sub.expires_at.strftime("%d.%m.%Y %H:%M")
            
            await message.answer(
                f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at}"
            )
        else:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("clean_db"))
@admin_only
async def clean_db_cmd(message: Message):
    parts = message.text.split()
    days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    
    if len(parts) > 1:
        try:
            days = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º.")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"clean_confirm_{days}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="clean_cancel")]
    ])
    
    await message.answer(
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π.\n"
        f"–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("clean_confirm_"))
async def clean_confirm(callback_query):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    days = int(callback_query.data.split("_")[2])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = await callback_query.message.edit_text(
        "üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...",
        reply_markup=None
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    deleted_count = await delete_old_messages(days)
    
    await status_message.edit_text(
        f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π."
    )

@router.callback_query(lambda c: c.data == "clean_cancel")
async def clean_cancel(callback_query):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await callback_query.answer() 